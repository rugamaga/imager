version: 2

anchors:
  - &repo
    META_GCLOUD_SERVICE_KEY: ${REPO_GCLOUD_SERVICE_KEY}
    GOOGLE_CLOUD_KEYFILE_JSON: .credentials/repository@rugamaga.json
    GCP_PROJECT_ID: rugamaga
    REGISTRY: asia.gcr.io/rugamaga

  - &prd
    ENV: prd
    META_GCLOUD_SERVICE_KEY: ${PRD_GCLOUD_SERVICE_KEY}
    GOOGLE_CLOUD_KEYFILE_JSON: .credentials/kubernetes@rugamaga-prd.json
    GCP_PROJECT_ID: rugamaga-prd
    CLUSTER_NAME: gke-rugamaga
    CLUSTER_ZONE: asia-northeast1-a
    REGISTRY: asia.gcr.io/rugamaga
    META_IMAGER_DATABASE_PASSWORD: ${PRD_IMAGER_DATABASE_PASSWORD}
    META_DATABASE_URL: ${PRD_DATABASE_URL}

  - &dev
    ENV: dev
    META_GCLOUD_SERVICE_KEY: ${DEV_GCLOUD_SERVICE_KEY}
    GOOGLE_CLOUD_KEYFILE_JSON: .credentials/kubernetes@rugamaga-dev.json
    GCP_PROJECT_ID: rugamaga-dev
    CLUSTER_NAME: gke-rugamaga
    CLUSTER_ZONE: asia-northeast1-a
    REGISTRY: asia.gcr.io/rugamaga
    META_IMAGER_DATABASE_PASSWORD: ${DEV_IMAGER_DATABASE_PASSWORD}
    META_DATABASE_URL: ${DEV_DATABASE_URL}

  - &defaults
    docker:
      - image: google/cloud-sdk:300.0.0

  - &build
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create credential file for gcloud
          command: eval echo ${META_GCLOUD_SERVICE_KEY} > ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Activate credential file for gcloud
          command: gcloud auth activate-service-account --key-file ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Configure docker authentication by using gcloud
          command: gcloud auth configure-docker --quiet
      - run:
          name: Build and push
          command: |
            export SYSTEM=${CIRCLE_PROJECT_REPONAME}
            export TAG=${CIRCLE_SHA1}
            export DATABASE_URL=$(eval "echo -n ${META_DATABASE_URL}")
            export IMAGER_DATABASE_PASSWORD=$(eval "echo -n ${META_IMAGER_DATABASE_PASSWORD}")
            ./scripts/build.sh

  - &plan
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create credential file for gcloud
          command: eval echo ${META_GCLOUD_SERVICE_KEY} > ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Activate credential file for gcloud
          command: gcloud auth activate-service-account --key-file ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Set project for gcloud
          command: gcloud config set project ${GCP_PROJECT_ID}
      - run:
          name: Get credentials for kubectl by using gcloud
          command: gcloud container clusters get-credentials --zone ${CLUSTER_ZONE} ${CLUSTER_NAME}
      - run:
          name: Run deploy plan
          command: |
            export SYSTEM=${CIRCLE_PROJECT_REPONAME}
            export TAG=${CIRCLE_SHA1}
            export DATABASE_URL=$(eval "echo -n ${META_DATABASE_URL}")
            export IMAGER_DATABASE_PASSWORD=$(eval "echo -n ${META_IMAGER_DATABASE_PASSWORD}")
            ./scripts/plan.sh

  - &apply
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create credential file for gcloud
          command: eval echo ${META_GCLOUD_SERVICE_KEY} > ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Activate credential file for gcloud
          command: gcloud auth activate-service-account --key-file ${GOOGLE_CLOUD_KEYFILE_JSON}
      - run:
          name: Set project for gcloud
          command: gcloud config set project ${GCP_PROJECT_ID}
      - run:
          name: Get credentials for kubectl by using gcloud
          command: gcloud container clusters get-credentials --zone ${CLUSTER_ZONE} ${CLUSTER_NAME}
      - run:
          name: Run deploy apply
          command: |
            export SYSTEM=${CIRCLE_PROJECT_REPONAME}
            export TAG=${CIRCLE_SHA1}
            export DATABASE_URL=$(eval "echo -n ${META_DATABASE_URL}")
            export IMAGER_DATABASE_PASSWORD=$(eval "echo -n ${META_IMAGER_DATABASE_PASSWORD}")
            ./scripts/apply.sh

jobs:
  client-build:
    environment:
      <<: *repo
      COMPONENT: client
    <<: *build

  client-plan-prd:
    environment:
      <<: *prd
      COMPONENT: client
      ACTION: deploy
    <<: *plan

  client-plan-dev:
    environment:
      <<: *dev
      COMPONENT: client
      ACTION: deploy
    <<: *plan

  client-apply-prd:
    environment:
      <<: *prd
      COMPONENT: client
      ACTION: deploy
    <<: *apply

  client-apply-dev:
    environment:
      <<: *dev
      COMPONENT: client
      ACTION: deploy
    <<: *apply

  server-build:
    environment:
      <<: *repo
      COMPONENT: server
    <<: *build

  server-plan-prd:
    environment:
      <<: *prd
      COMPONENT: server
      ACTION: deploy
    <<: *plan

  server-plan-dev:
    environment:
      <<: *dev
      COMPONENT: server
      ACTION: deploy
    <<: *plan

  server-apply-prd:
    environment:
      <<: *prd
      COMPONENT: server
      ACTION: deploy
    <<: *apply

  server-apply-dev:
    environment:
      <<: *dev
      COMPONENT: server
      ACTION: deploy
    <<: *apply

  database-plan-prd:
    environment:
      <<: *prd
      COMPONENT: database
      ACTION: deploy
    <<: *plan

  database-plan-dev:
    environment:
      <<: *dev
      COMPONENT: database
      ACTION: deploy
    <<: *plan

  database-apply-prd:
    environment:
      <<: *prd
      COMPONENT: database
      ACTION: deploy
    <<: *apply

  database-apply-dev:
    environment:
      <<: *dev
      COMPONENT: database
      ACTION: deploy
    <<: *apply

  network-plan-prd:
    environment:
      <<: *prd
      COMPONENT: network
      ACTION: deploy
    <<: *plan

  network-plan-dev:
    environment:
      <<: *dev
      COMPONENT: network
      ACTION: deploy
    <<: *plan

  network-apply-prd:
    environment:
      <<: *prd
      COMPONENT: network
      ACTION: deploy
    <<: *apply

  network-apply-dev:
    environment:
      <<: *dev
      COMPONENT: network
      ACTION: deploy
    <<: *apply

workflows:
  version: 2

  build:
    jobs:
      - client-build
      - server-build

  prd:
    jobs:
      - client-plan-prd:
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - server-plan-prd:
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - database-plan-prd:
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - network-plan-prd:
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - client-apply-prd:
          requires:
            - client-plan-prd
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - server-apply-prd:
          requires:
            - server-plan-prd
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - database-apply-prd:
          requires:
            - database-plan-prd
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/
      - network-apply-prd:
          requires:
            - network-plan-prd
          filters:
            tags:
              only: /^PRD\/v.*$/
            branches:
              ignore: /.*/

  dev:
    jobs:
      - client-plan-dev
      - server-plan-dev
      - database-plan-dev
      - network-plan-dev
      - client-apply-dev:
          requires:
            - client-plan-dev
          filters:
            branches:
              only: master
      - server-apply-dev:
          requires:
            - server-plan-dev
          filters:
            branches:
              only: master
      - database-apply-dev:
          requires:
            - database-plan-dev
          filters:
            branches:
              only: master
      - network-apply-dev:
          requires:
            - network-plan-dev
          filters:
            branches:
              only: master

  dev_explicit:
    jobs:
      - client-plan-dev:
          filters:
            tags:
              only: /^DEV\/v.*$/
            branches:
              ignore: /.*/
      - server-plan-dev:
          filters:
            tags:
              only: /^DEV\/v.*$/
            branches:
              ignore: /.*/
      - database-plan-dev:
          filters:
            tags:
              only: /^DEV\/v.*$/
            branches:
              ignore: /.*/
      - network-plan-dev:
          filters:
            tags:
              only: /^DEV\/v.*$/
            branches:
              ignore: /.*/
      - client-apply-dev:
          requires:
            - client-plan-dev
      - server-apply-dev:
          requires:
            - server-plan-dev
      - database-apply-dev:
          requires:
            - database-plan-dev
      - network-apply-dev:
          requires:
            - network-plan-dev
